
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author jakepalmer
 */
public class MainFrame extends javax.swing.JFrame {

    //Game
    static Gameboard gameBoard = new Gameboard(3);
    int dimensions;

    Opponent compPlayer;
    Opponent compPlayerTwo;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();

        dimensions = 3;
        gameBoard = new Gameboard(dimensions);
        compPlayer = new Opponent();
        compPlayerTwo = new Opponent();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 600), new java.awt.Dimension(0, 600), new java.awt.Dimension(32767, 600));
        boardPanel = new MyPanel();
        hexaPawnBtn = new javax.swing.JButton();
        pentaPawnBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        consoleTextArea = new javax.swing.JTextArea();
        consoleBoardBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        GamesWonLabel = new javax.swing.JLabel();
        saveBotBtn = new javax.swing.JButton();
        loadBotBtn = new javax.swing.JButton();
        printBListBtn = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        boardPanel.setBackground(new java.awt.Color(255, 255, 255));
        boardPanel.setMaximumSize(new java.awt.Dimension(600, 600));
        boardPanel.setMinimumSize(new java.awt.Dimension(600, 600));
        boardPanel.setPreferredSize(new java.awt.Dimension(600, 600));
        boardPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                boardPanelMouseDragged(evt);
            }
        });
        boardPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                boardPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                boardPanelMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout boardPanelLayout = new javax.swing.GroupLayout(boardPanel);
        boardPanel.setLayout(boardPanelLayout);
        boardPanelLayout.setHorizontalGroup(
            boardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        boardPanelLayout.setVerticalGroup(
            boardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        hexaPawnBtn.setText("Hexa-Pawn");
        hexaPawnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hexaPawnBtnActionPerformed(evt);
            }
        });

        pentaPawnBtn.setText("Penta-Pawn");
        pentaPawnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pentaPawnBtnActionPerformed(evt);
            }
        });

        consoleTextArea.setColumns(20);
        consoleTextArea.setRows(5);
        jScrollPane2.setViewportView(consoleTextArea);

        consoleBoardBtn.setText("Show Board");
        consoleBoardBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consoleBoardBtnActionPerformed(evt);
            }
        });

        jButton1.setText("Show bool");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        GamesWonLabel.setText("GamesWon/BoardsSaved: 0");

        saveBotBtn.setText("Save Bot");
        saveBotBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBotBtnActionPerformed(evt);
            }
        });

        loadBotBtn.setText("Load Bot");
        loadBotBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBotBtnActionPerformed(evt);
            }
        });

        printBListBtn.setText("Bot B");
        printBListBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printBListBtnActionPerformed(evt);
            }
        });

        jButton2.setText("Bot M");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pentaPawnBtn)
                            .addComponent(hexaPawnBtn)
                            .addComponent(consoleBoardBtn)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jButton1)))
                        .addGap(53, 53, 53))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(GamesWonLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(printBListBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(saveBotBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(loadBotBtn)
                                    .addComponent(jButton2))))
                        .addGap(15, 15, 15))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(boardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(hexaPawnBtn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pentaPawnBtn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(consoleBoardBtn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton1)
                            .addGap(31, 31, 31)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton2)
                                .addComponent(printBListBtn))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(saveBotBtn)
                                .addComponent(loadBotBtn))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(GamesWonLabel)
                            .addGap(18, 18, 18)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hexaPawnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hexaPawnBtnActionPerformed
        // TODO add your handling code here:
        dimensions = 3;
        gameBoard = new Gameboard(dimensions);

        consoleTextArea.setText("");
        repaint();
    }//GEN-LAST:event_hexaPawnBtnActionPerformed

    private void pentaPawnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pentaPawnBtnActionPerformed
        // TODO add your handling code here:        
        dimensions = 4;
        System.out.println("dimensions = " + dimensions);
        gameBoard = new Gameboard(dimensions);

        repaint();
    }//GEN-LAST:event_pentaPawnBtnActionPerformed

    private void consoleBoardBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consoleBoardBtnActionPerformed
        // TODO add your handling code here:       
        if (gameBoard != null) {
            consoleTextArea.append("------\n" + gameBoard.toString() + "------\n");
        } else {
            System.out.println("Not Yet!...");
        }
    }//GEN-LAST:event_consoleBoardBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        consoleTextArea.append(gameBoard.toBoolString());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void boardPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boardPanelMousePressed
        // TODO add your handling code here:
        if (!gameBoard.isGameOver()) {
            gameBoard.setMouse(evt.getX(), evt.getY());
            gameBoard.handlePressed(evt.getX(), evt.getY());
            repaint();
        }
    }//GEN-LAST:event_boardPanelMousePressed

    private void boardPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boardPanelMouseReleased
        // TODO add your handling code here:
        gameBoard.setMouse(evt.getX(), evt.getY());

        if (gameBoard.handleRealesed(evt.getX(), evt.getY())) {

            if ((gameBoard.getCurrentTurn() == -1) && (!gameBoard.isGameOver())) { //If Computer turn && game not over
                repaint();
                try {
                    gameBoard.makeMove(compPlayer.selectRandomMoveAndLearn(gameBoard));
                } catch (CloneNotSupportedException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                repaint();
            } else {

                if (gameBoard.isGameOver()) {  //No more Moves 

                    if (gameBoard.getCurrentTurn() == -1) {
                        consoleTextArea.append("Game Over! You won!\n");
                        GamesWonLabel.setText("GamesWon/BoardsSaved: " + (compPlayer.getLearner().loseList.size() + 1));
                        compPlayer.recordLoss();
                    }
                }
            }

        }

        repaint();

    }//GEN-LAST:event_boardPanelMouseReleased

    private void boardPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boardPanelMouseDragged
        // TODO add your handling code here:
        gameBoard.setMouse(evt.getX(), evt.getY());
        repaint();

    }//GEN-LAST:event_boardPanelMouseDragged

    private void saveBotBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBotBtnActionPerformed
        // TODO add your handling code here:
        MyWriter myWriter = new MyWriter();
        BoardList theBList = compPlayer.getLearner().getBList();

        for (int i = 0; i < theBList.size(); i++) {
            System.out.println(theBList.get(i).toString());
            myWriter.print(theBList.get(i).toString());
            myWriter.print("---------------------\n");
        }

        //myWriter.print("************************");
        myWriter.print(compPlayer.getLearner().getLoseList().toString());
        myWriter.close();
    }//GEN-LAST:event_saveBotBtnActionPerformed

    private void loadBotBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBotBtnActionPerformed
        // TODO add your handling code here:
        MyReader myReader = new MyReader();
        BoardList aBoardList = new BoardList();
        MoveList aLoseList = new MoveList();
        String theLine;
        Gameboard tempBoard;
        int[][] aBoard = new int[gameBoard.getBoardDimensions()][gameBoard.getBoardDimensions()];
        boolean MOVE = false;

        //GameBoard
        while (myReader.hasMoreData()) { // Go through Document line by line
            theLine = myReader.giveMeTheNextLine(); //Assign document line to String

            //  if (MOVE = false) {
            if (theLine.contains("------------------------")) {
                theLine = myReader.giveMeTheNextLine();
            } else if ((theLine.charAt(0) == ('o')) || (theLine.charAt(0) == ('x')) || (theLine.charAt(0) == ('-'))) {
                tempBoard = new Gameboard(gameBoard.getBoardDimensions());

                for (int i = 0; i < tempBoard.getBoardDimensions(); i++) {//Iterate Y                    
                    for (int j = 0; j < tempBoard.getBoardDimensions(); j++) { //Iterate X
                        //System.out.println("Our Char " + theLine.charAt(j));
                        //System.out.println("theLine " + theLine.charAt(j) + " J: " + j);
                        switch (theLine.charAt(j)) {
                            case 'o':
                                aBoard[j][i] = 1;
                                break;
                            case 'x':
                                aBoard[j][i] = -1;
                                break;
                            default:
                                aBoard[j][i] = 0;
                                break;
                        }
                    }
                    theLine = myReader.giveMeTheNextLine();
                }

                tempBoard.setTheBoard(aBoard);
                System.out.println("tempBoard: \n" + tempBoard.toString());

                aBoardList.add(tempBoard);
            } else if (theLine.contains("MOVES")) {
                System.out.println("Made it too lose list!");
                MOVE = true;
            } else {
                System.out.println("SOMETHING WRONG HAPPENED !!!!!");
            }

            //  }
            if (MOVE) {
                //LoseList
                Move tempMove;
                int fromRow;
                int fromCol;
                int toRow;
                int toCol;

                //for (int i = 0; i < compPlayer.getLearner().getLoseList().size(); i++) { //For the number of moves
                if (myReader.hasMoreData()) { //if more text make another move
                    
                
                    if (theLine.contains("Move")) {
                        theLine = myReader.giveMeTheNextLine();
                        theLine = myReader.giveMeTheNextLine();
                        fromCol = theLine.charAt(13);
                        fromRow = theLine.charAt(25);
                        theLine = myReader.giveMeTheNextLine();
                        toCol = theLine.charAt(11);
                        toRow = theLine.charAt(21);
                        tempMove = new Move(fromRow, fromCol, toRow, toCol);

                        aLoseList.add(tempMove);
                        System.out.println("hereline: " + theLine);
                    } else if (theLine.contains("------------------------")) {
                        theLine = myReader.giveMeTheNextLine();
                    } else {
                        System.out.println("something wrong happened!!");
                    }
                }
            }
        consoleTextArea.append("Bot Loaded!");
        compPlayer.getLearner().setBList(aBoardList);
        compPlayer.getLearner().setLoseList(aLoseList);
        return;
            
        }

        


    }//GEN-LAST:event_loadBotBtnActionPerformed

    private void printBListBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printBListBtnActionPerformed
        BoardList theBList = compPlayer.getLearner().getBList();
        for (int i = 0; i < theBList.size(); i++) {
            System.out.println("TheBList:_______\n" + theBList.get(i));
            consoleTextArea.append(theBList.get(i).toString());
        }
    }//GEN-LAST:event_printBListBtnActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        for (int i = 0; i < compPlayer.getLearner().getLoseList().size(); i++) {                    
            consoleTextArea.append("-------------------\nMove: " + i + ("\n-------------------\n") );
            consoleTextArea.append(compPlayer.getLearner().getLoseList().get(i).toString());
            consoleTextArea.append("-------------------\n");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel GamesWonLabel;
    private javax.swing.JPanel boardPanel;
    private javax.swing.JButton consoleBoardBtn;
    private javax.swing.JTextArea consoleTextArea;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton hexaPawnBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton loadBotBtn;
    private javax.swing.JButton pentaPawnBtn;
    private javax.swing.JButton printBListBtn;
    private javax.swing.JButton saveBotBtn;
    // End of variables declaration//GEN-END:variables

}

//TRAIN BUTTON *DEPRICIATED*
//
//System.out.println("bLIst.length: " + compPlayer.theLearner.getBList().size() + " lostList.length: " + compPlayer.theLearner.getLoseList().size());
//        System.out.println("bLIst.length: " + compPlayerTwo.theLearner.getBList().size() + " lostList.length: " + compPlayerTwo.theLearner.getLoseList().size());
//
//        for (int i = 0; i < 150; i++) {
//
//            consoleTextArea.append("Its " + gameBoard.getCurrentTurn());
//
//            // TODO add your handling code here:
//            if ((gameBoard.getCurrentTurn() == -1) && (!gameBoard.isGameOver())) { //If Computer turn && game not over
//                repaint();
//                try {
//                    gameBoard.makeMove(compPlayer.selectRandomMoveAndLearn(gameBoard));
//                } catch (CloneNotSupportedException ex) {
//                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//                }
//                repaint();
//            } else {
//
//                if (gameBoard.isGameOver()) {  //No more Moves 
//
//                    if (gameBoard.getCurrentTurn() == -1) {
//                        TrainedLabel.setText("Trained: " + (compPlayer.getLearner().loseList.size() + 1));
//                        compPlayer.recordLoss();
//                    }
//                }
//            }
//
//            if ((gameBoard.getCurrentTurn() == 1) && (!gameBoard.isGameOver())) { //If Computer turn && game not over
//                repaint();
//
//                gameBoard.makeMove(compPlayerTwo.selectRandomMove(gameBoard));
//
//                repaint();
//            } else {
//
//                if (gameBoard.isGameOver()) {  //No more Moves 
//
//                    if (gameBoard.getCurrentTurn() == 1) {
//                        compPlayerTwo.recordLoss();
//                    }
//                }
//            }
//
//        }
//
//        System.out.println("bLIst.length: " + compPlayer.theLearner.getBList().size() + " lostList.length: " + compPlayer.theLearner.getLoseList().size());
//        System.out.println("bLIst.length: " + compPlayerTwo.theLearner.getBList().size() + " lostList.length: " + compPlayerTwo.theLearner.getLoseList().size());
//        gameBoard = new Gameboard(dimensions);
//        repaint();
